// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/graph-data": {
            "get": {
                "description": "Mengembalikan seluruh data elemen dan resep yang valid dalam format ID terstruktur, terurut berdasarkan penemuan saat scraping. Termasuk info Tier, FromPair, dan CanMake. Hanya elemen dasar atau yang punya resep valid dan tier terhitung yang disertakan.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Graph Data"
                ],
                "summary": "Get All Processed Graph Data",
                "responses": {
                    "200": {
                        "description": "Array data elemen dalam format ID dengan Tier\"\t//\tTipe\tdi\tswagger\tdiupdate",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/scraper.Element"
                            }
                        }
                    },
                    "500": {
                        "description": "Error jika data graf belum siap atau tidak valid",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/solve-recipe": {
            "get": {
                "description": "Finds recipes to create the specified element using either DFS or BFS algorithm",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "recipes"
                ],
                "summary": "Get recipes for an element",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Element name to find recipes for",
                        "name": "element",
                        "in": "query",
                        "required": true
                    },
                    {
                        "enum": [
                            "dfs",
                            "bfs"
                        ],
                        "type": "string",
                        "default": "dfs",
                        "description": "Search algorithm (dfs or bfs)",
                        "name": "algorithm",
                        "in": "query"
                    },
                    {
                        "minimum": 1,
                        "type": "integer",
                        "default": 1,
                        "description": "Number of recipes to find",
                        "name": "count",
                        "in": "query"
                    },
                    {
                        "type": "string",
                        "default": "shortest",
                        "description": "Search mode",
                        "name": "mode",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successful response",
                        "schema": {
                            "$ref": "#/definitions/api.RecipeSolution"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "api.RecipePath": {
            "type": "object",
            "properties": {
                "dibuatDari": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "$ref": "#/definitions/api.RecipePath"
                        }
                    }
                },
                "isBaseElement": {
                    "type": "boolean"
                },
                "namaElemen": {
                    "type": "string"
                }
            }
        },
        "api.RecipeSolution": {
            "type": "object",
            "properties": {
                "elementName": {
                    "type": "string"
                },
                "found": {
                    "type": "boolean"
                },
                "nodesVisited": {
                    "type": "integer"
                },
                "recipes": {
                    "type": "array",
                    "items": {
                        "$ref": "#/definitions/api.RecipePath"
                    }
                },
                "searchParams": {
                    "$ref": "#/definitions/api.SearchParams"
                },
                "searchTimeMs": {
                    "type": "number"
                }
            }
        },
        "api.SearchParams": {
            "type": "object",
            "properties": {
                "algorithm": {
                    "type": "string"
                },
                "count": {
                    "type": "integer"
                },
                "mode": {
                    "type": "string"
                }
            }
        },
        "scraper.Element": {
            "type": "object",
            "properties": {
                "CanMake": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "FromPair": {
                    "type": "array",
                    "items": {
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    }
                },
                "Id": {
                    "type": "integer"
                },
                "Name": {
                    "type": "string"
                },
                "Tier": {
                    "type": "integer"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
